import openai
import streamlit as st

# open files
def open_file(filepath):
    with open(filepath, 'r', encoding='utf-8') as infile:
        return infile.read()

# load & inject style sheet
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# state session check for form submission
def check_true_motoko():
    st.session_state.check["motoko"] = True

# state session check for form submission
def check_true_summarise():
    st.session_state.check["summarise"] = True

# state session check for form submission
def check_true_explain():
    st.session_state.check["explain"] = True

# GPT3 request
def gpt3_completion(prompt, engine='text-davinci-002', temp=0.7, top_p=1, tokens=1000, freq_pen=0.3, pres_pen=0.0, stop=['Motoko:', 'You:']):

    # clean prompt of unsupported characters
    prompt = prompt.encode(encoding='ASCII',errors='ignore').decode()

    # fetch response
    response = openai.Completion.create(
        engine=engine,
        prompt=prompt,
        temperature=temp,
        max_tokens=tokens,
        top_p=top_p,
        frequency_penalty=freq_pen,
        presence_penalty=pres_pen,
        stop=stop)
    
    # strip & return motoko response
    text = response['choices'][0]['text'].strip()
    return text

def info_box():

    # create an info box
    with st.expander("See info"):

        st.write("### Thanks for visiting Chatty!")

        st.write("""
            This website was made using Python, you can view the source [here](https://github.com/dylnbk/chat-bot).

            The responses are generated by using OpenAI's GPT-3 model. 
            
            To show support, you can â˜• [buy me a coffee](https://www.buymeacoffee.com/dylnbk).
            """)

        st.write("***")

        st.write("""
            ##### Chat
            - A friendly AI that simply wants to have a conversation!
            """)
        
        st.write("***")

        st.write("""
            ##### Summarize
            - Enter text for a numbered summary.
            """)

        st.write("***")

        st.write("""
            ##### Explain
            - Will attempt to simplify & explain the text.
            - Works for code snippets!
            """)

        st.write("")
        st.write("")

# page configurations
st.set_page_config(
    page_title="Ask it.",
    page_icon="ðŸ’¬",
    menu_items={
        'Report a bug': "mailto:dyln.bk@gmail.com",
        'Get help': None,
        'About': "Made by dyln.bk"
    }
)

# style sheet & openAI API key
local_css("style.css")
openai.api_key = st.secrets["openaiapikey"]

# create session state to save the conversation
if 'conversation' not in st.session_state:
    st.session_state.conversation = {
        "motoko": [],
    }

# create session state for form submission
if 'check' not in st.session_state:
    st.session_state.check = {

        "motoko": False,
        "summarise": False,
        "explain": False
    }

if __name__ == '__main__':

    st.title('Ask it.')    

    # define tabs
    tab1, tab2, tab3 = st.tabs(["Chat", "Summarize", "Explain"])

    with tab1:

        # create a form  
        with st.form("input_motoko", clear_on_submit=True):     

            # text area for user input limited to 1k chars
            user_input = st.text_area('Enter a message:', max_chars=250)

            # submit button with onclick that udpates session state 
            st.form_submit_button("Submit", on_click=check_true_motoko)

            # see info box
            info_box()

            # if the form is submitted, create and write the response
            if st.session_state.check["motoko"]:

                # get user input and insert into the prompt
                st.session_state.conversation["motoko"].append(f'You: {user_input}')
                text_block = '\n\n\n'.join(st.session_state.conversation["motoko"])
                prompt = open_file('promptchat_motoko.txt').replace('<<BLOCK>>', text_block)
                prompt = prompt + '\n\nMotoko: '

                # request completetion 
                response = gpt3_completion(prompt)

                # append motoko response & write the response
                st.session_state.conversation["motoko"].append(f'Motoko: {response}')
                st.write(f'<p style="font-size: 1.5rem; padding: 10px;">{response}</p>', unsafe_allow_html=True)

                # reset the session state
                st.session_state.check["motoko"] = False

    with tab2:

        # create a form  
        with st.form("input_summarise", clear_on_submit=True):   

            # text area for user input limited to 1k chars
            user_input = st.text_area('Enter a message:', max_chars=1000)

            # submit button with onclick that udpates session state 
            st.form_submit_button("Submit", on_click=check_true_summarise)

            # see info box
            info_box()

            # if the form is submitted, create and write the response
            if st.session_state.check["summarise"]:

                # get user input and insert into the prompt
                text_block = f'{user_input}\n\nSummarize the text using a numeric list:'
                prompt = open_file('promptchat_summarise.txt').replace('<<BLOCK>>', text_block)

                # request completetion 
                response = gpt3_completion(prompt)

                # write the response
                st.write(response)

                # reset the session state
                st.session_state.check["summarise"] = False

    with tab3:

        # create a form  
        with st.form("input_explain", clear_on_submit=True):   

            # text area for user input limited to 1k chars
            user_input = st.text_area('Enter a message:', max_chars=1000)

            # submit button with onclick that udpates session state 
            st.form_submit_button("Submit", on_click=check_true_explain)

            # see info box
            info_box()

            # if the form is submitted, create and write the response
            if st.session_state.check["explain"]:

                # get user input and insert into the prompt
                text_block = f'{user_input}'
                prompt = open_file('promptchat_explain.txt').replace('<<BLOCK>>', text_block)

                # request completetion 
                response = gpt3_completion(prompt)

                # write the response
                st.write(f'<p style="font-size: 1.5rem; padding: 10px;">{response}</p>', unsafe_allow_html=True)

                # reset the session state
                st.session_state.check["explain"] = False
